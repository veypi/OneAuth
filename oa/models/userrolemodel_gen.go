// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRoleFieldNames          = builder.RawFieldNames(&UserRole{})
	userRoleRows                = strings.Join(userRoleFieldNames, ",")
	userRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(userRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(userRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userRoleModel interface {
		Insert(ctx context.Context, data *UserRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRole, error)
		FindOneByUserIdRoleId(ctx context.Context, userId string, roleId string) (*UserRole, error)
		Update(ctx context.Context, data *UserRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserRole struct {
		Id      int64     `db:"id"`
		Created time.Time `db:"created"`
		Updated time.Time `db:"updated"`
		UserId  string    `db:"user_id"`
		RoleId  string    `db:"role_id"`
		Status  string    `db:"status"`
	}
)

func newUserRoleModel(conn sqlx.SqlConn) *defaultUserRoleModel {
	return &defaultUserRoleModel{
		conn:  conn,
		table: "`user_role`",
	}
}

func (m *defaultUserRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserRoleModel) FindOne(ctx context.Context, id int64) (*UserRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRoleRows, m.table)
	var resp UserRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleModel) FindOneByUserIdRoleId(ctx context.Context, userId string, roleId string) (*UserRole, error) {
	var resp UserRole
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `role_id` = ? limit 1", userRoleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, roleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleModel) Insert(ctx context.Context, data *UserRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Created, data.Updated, data.UserId, data.RoleId, data.Status)
	return ret, err
}

func (m *defaultUserRoleModel) Update(ctx context.Context, newData *UserRole) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Created, newData.Updated, newData.UserId, newData.RoleId, newData.Status, newData.Id)
	return err
}

func (m *defaultUserRoleModel) tableName() string {
	return m.table
}
