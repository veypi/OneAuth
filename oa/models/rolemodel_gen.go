// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleRowsWithPlaceHolder = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, id string) error
	}

	defaultRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Role struct {
		Id        string    `db:"id"`
		Created   time.Time `db:"created"`
		Updated   time.Time `db:"updated"`
		AppId     string    `db:"app_id"`
		Name      string    `db:"name"`
		Des       string    `db:"des"`
		UserCount int64     `db:"user_count"`
	}
)

func newRoleModel(conn sqlx.SqlConn) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: "`role`",
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id string) (*Role, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRows, m.table)
	var resp Role
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, roleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Created, data.Updated, data.AppId, data.Name, data.Des, data.UserCount)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, data *Role) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Created, data.Updated, data.AppId, data.Name, data.Des, data.UserCount, data.Id)
	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
