// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accessFieldNames          = builder.RawFieldNames(&Access{})
	accessRows                = strings.Join(accessFieldNames, ",")
	accessRowsExpectAutoSet   = strings.Join(stringx.Remove(accessFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accessRowsWithPlaceHolder = strings.Join(stringx.Remove(accessFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	accessModel interface {
		Insert(ctx context.Context, data *Access) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Access, error)
		Update(ctx context.Context, data *Access) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccessModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Access struct {
		Id       int64          `db:"id"`
		Created  time.Time      `db:"created"`
		Updated  time.Time      `db:"updated"`
		AppId    string         `db:"app_id"`
		AccessId int64          `db:"access_id"`
		Name     string         `db:"name"`
		RoleId   sql.NullString `db:"role_id"`
		UserId   sql.NullString `db:"user_id"`
		Rid      sql.NullString `db:"rid"` // 资源子id
		Level    int64          `db:"level"`
	}
)

func newAccessModel(conn sqlx.SqlConn) *defaultAccessModel {
	return &defaultAccessModel{
		conn:  conn,
		table: "`access`",
	}
}

func (m *defaultAccessModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccessModel) FindOne(ctx context.Context, id int64) (*Access, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accessRows, m.table)
	var resp Access
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccessModel) Insert(ctx context.Context, data *Access) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, accessRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Created, data.Updated, data.AppId, data.AccessId, data.Name, data.RoleId, data.UserId, data.Rid, data.Level)
	return ret, err
}

func (m *defaultAccessModel) Update(ctx context.Context, data *Access) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accessRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Created, data.Updated, data.AppId, data.AccessId, data.Name, data.RoleId, data.UserId, data.Rid, data.Level, data.Id)
	return err
}

func (m *defaultAccessModel) tableName() string {
	return m.table
}
