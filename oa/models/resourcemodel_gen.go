// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceFieldNames          = builder.RawFieldNames(&Resource{})
	resourceRows                = strings.Join(resourceFieldNames, ",")
	resourceRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourceRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourceModel interface {
		Insert(ctx context.Context, data *Resource) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Resource, error)
		FindOneByAppIdName(ctx context.Context, appId string, name string) (*Resource, error)
		Update(ctx context.Context, data *Resource) error
		Delete(ctx context.Context, id int64) error
	}

	defaultResourceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Resource struct {
		Id      int64          `db:"id"`
		Created time.Time      `db:"created"`
		Updated time.Time      `db:"updated"`
		AppId   string         `db:"app_id"`
		Name    string         `db:"name"`
		Des     sql.NullString `db:"des"`
	}
)

func newResourceModel(conn sqlx.SqlConn) *defaultResourceModel {
	return &defaultResourceModel{
		conn:  conn,
		table: "`resource`",
	}
}

func (m *defaultResourceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultResourceModel) FindOne(ctx context.Context, id int64) (*Resource, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceRows, m.table)
	var resp Resource
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceModel) FindOneByAppIdName(ctx context.Context, appId string, name string) (*Resource, error) {
	var resp Resource
	query := fmt.Sprintf("select %s from %s where `app_id` = ? and `name` = ? limit 1", resourceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, appId, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceModel) Insert(ctx context.Context, data *Resource) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, resourceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Created, data.Updated, data.AppId, data.Name, data.Des)
	return ret, err
}

func (m *defaultResourceModel) Update(ctx context.Context, newData *Resource) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Created, newData.Updated, newData.AppId, newData.Name, newData.Des, newData.Id)
	return err
}

func (m *defaultResourceModel) tableName() string {
	return m.table
}
